<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Create a Meeting</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Add SweetAlert2 -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <!-- Header with Navigation -->
  <header class="header2">
    <div class="header-content">
    <img src="/DPLOGO.png" alt="Logo" class="logo">
    
      <!-- Navigation Menu -->
      <nav class="main-nav">
      <ul>
        <li><a href="/" target="_self">Home</a></li>
        <li><a href="https://rainmakerqueen.com/" target="_blank">Rainmaker Home Page</a></li>
        <li><a href="https://rainmakerqueen.com/#expert" target="_blank">Expert Pipeline</a></li>
        <li><a href="https://lawdecker-my.sharepoint.com" target="_blank">My OneDrive</a></li>
      </ul>
    </nav>
    </div>
  </header>

  <!-- Main Content Container -->
  <div class="content-container meeting-creator-container">
    <h2>Create a Meeting</h2>
    <% if (!session || !session.accessToken) { %>
      <p>Please <a href="/teams/login">login</a> to create a meeting.</p>
    <% } else { %>
      <form id="meetingForm" class="meeting-form">
        <div>
          <label for="topic">Meeting Topic:</label>
          <input type="text" id="topic" required placeholder="Enter meeting topic...">
        </div>
        <div>
          <label for="dateTime">Date & Time:</label>
          <!-- Modern Date and Time Picker -->
          <div class="datetime-picker-container">
            <div class="datetime-picker-trigger" id="datetime-trigger">
              <span id="selected-datetime">Select date and time</span>
              <i class="fas fa-calendar-alt"></i>
            </div>
            
            <div class="datetime-picker-dropdown" id="datetime-dropdown">
              <div class="datetime-picker-header">
                <button id="prev-month" type="button"><i class="fas fa-chevron-left"></i></button>
                <span id="current-month">September 2023</span>
                <button id="next-month" type="button"><i class="fas fa-chevron-right"></i></button>
              </div>
              
              <div class="datetime-picker-body">
                <div class="quick-date-selection">
                  <div class="quick-date-option" data-days="0">Today</div>
                  <div class="quick-date-option" data-days="1">Tomorrow</div>
                  <div class="quick-date-option" data-days="7">Next Week</div>
                </div>
                
                <div class="datetime-picker-calendar" id="calendar">
                  <!-- Weekday headers -->
                  <div class="weekday">Sun</div>
                  <div class="weekday">Mon</div>
                  <div class="weekday">Tue</div>
                  <div class="weekday">Wed</div>
                  <div class="weekday">Thu</div>
                  <div class="weekday">Fri</div>
                  <div class="weekday">Sat</div>
                  
                  <!-- Calendar days will be populated by JavaScript -->
                </div>
                
                <div class="datetime-picker-time">
                  <div class="time-selector">
                    <button id="decrease-hour" type="button"><i class="fas fa-chevron-down"></i></button>
                    <input type="text" id="hour" value="12" maxlength="2">
                    <button id="increase-hour" type="button"><i class="fas fa-chevron-up"></i></button>
                    <span>:</span>
                    <button id="decrease-minute" type="button"><i class="fas fa-chevron-down"></i></button>
                    <input type="text" id="minute" value="00" maxlength="2">
                    <button id="increase-minute" type="button"><i class="fas fa-chevron-up"></i></button>
                  </div>
                </div>
              </div>
              
              <div class="datetime-picker-footer">
                <button type="button" class="cancel-btn" id="cancel-datetime">Cancel</button>
                <button type="button" class="apply-btn" id="apply-datetime">Apply</button>
              </div>
            </div>
          </div>
          <!-- Hidden input to store the actual datetime value for form submission -->
          <input type="hidden" id="dateTime" required>
        </div>
        <button type="submit">Generate Link</button>
      </form>
      <div id="meetingLinkContainer" class="button-row" style="display:none;">
        <a id="joinLink" href="#" target="_blank">
          <button type="button">Join Meeting</button>
        </a>
        <button id="emailButton" type="button"><i class="fas fa-envelope"></i> Send Email</button>
        <button id="copyButton" type="button">Copy Link</button>
      </div>

      <!-- Template Selection Modal -->
      <div id="templateModal" class="modal" style="display: none;">
        <div class="modal-content template-modal">
          <span class="close">&times;</span>
          <h2>Select Email Template</h2>
          <div class="template-options-container">
            <div class="template-option" data-template="english">
              <h3>English Template</h3>
              <p>Professional English meeting invitation</p>
              <button class="select-template">Select</button>
            </div>
            <div class="template-option" data-template="hebrew">
              <h3>Hebrew Template</h3>
              <p>Professional Hebrew meeting invitation</p>
              <button class="select-template">Select</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Email Modal -->
      <div id="emailModal" class="modal" style="display: none;">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Send Meeting Invitation</h2>
          <form id="emailForm">
            <div class="form-group">
              <label for="recipientEmail">Recipient Email:</label>
              <input type="email" id="recipientEmail" required>
            </div>
            <div class="form-group">
              <label for="recipientName">Recipient Name:</label>
              <input type="text" id="recipientName">
            </div>
            <input type="hidden" id="selectedTemplate" value="">
            <button type="submit">Send Invitation</button>
          </form>
        </div>
      </div>

    <% } %>
  </div>
  
  <!-- Inline Script for Hamburger Menu and Modal -->
  <script src="https://alcdn.msauth.net/browser/2.28.1/js/msal-browser.min.js"></script>
  <script>
    // MSAL configuration
    const msalConfig = {
      auth: {
        clientId: "e03ab8e9-4eb4-4bbc-8c6d-805021e089cd",
        authority: "https://login.microsoftonline.com/899fa835-174e-49e1-93a3-292318f5ee84",
        redirectUri: "http://localhost:3000/onedriveapp"
      }
    };

    const msalInstance = new msal.PublicClientApplication(msalConfig);
    const graphScopes = ["User.Read", "OnlineMeetings.ReadWrite", "Calendars.ReadWrite"];
    let currentAccount = null;

    // Toggle hamburger menu visibility
    function toggleMenu() {
      var menu = document.getElementById("menu");
      var hamburger = document.querySelector('.hamburger-menu');
      menu.classList.toggle("active");
      hamburger.classList.toggle("active");
      
      // Add animation delay to menu items
      const menuItems = menu.querySelectorAll('li');
      menuItems.forEach((item, index) => {
        item.style.setProperty('--i', index);
      });
    }
    
    // Close menu when clicking outside
    document.addEventListener('click', function(event) {
      const menu = document.getElementById('menu');
      const hamburger = document.querySelector('.hamburger-menu');
      
      if (menu && hamburger && !menu.contains(event.target) && !hamburger.contains(event.target) && menu.classList.contains('active')) {
        menu.classList.remove('active');
        hamburger.classList.remove('active');
      }
    });
    
    // Date and Time Picker Implementation
    document.addEventListener("DOMContentLoaded", function() {
      // Check if we're on the meeting creation page
      const meetingForm = document.getElementById("meetingForm");
      if (!meetingForm) return; // Exit if not on meeting page

      // Elements
      const datetimeTrigger = document.getElementById("datetime-trigger");
      const datetimeDropdown = document.getElementById("datetime-dropdown");
      const selectedDatetime = document.getElementById("selected-datetime");
      const currentMonth = document.getElementById("current-month");
      const prevMonthBtn = document.getElementById("prev-month");
      const nextMonthBtn = document.getElementById("next-month");
      const calendar = document.getElementById("calendar");
      const hourInput = document.getElementById("hour");
      const minuteInput = document.getElementById("minute");
      const decreaseHourBtn = document.getElementById("decrease-hour");
      const increaseHourBtn = document.getElementById("increase-hour");
      const decreaseMinuteBtn = document.getElementById("decrease-minute");
      const increaseMinuteBtn = document.getElementById("increase-minute");
      const cancelBtn = document.getElementById("cancel-datetime");
      const applyBtn = document.getElementById("apply-datetime");
      const dateTimeInput = document.getElementById("dateTime");
      const quickDateOptions = document.querySelectorAll(".quick-date-option");
      
      // Check if all required elements exist
      if (!datetimeTrigger || !datetimeDropdown || !selectedDatetime || !currentMonth || 
          !prevMonthBtn || !nextMonthBtn || !calendar || !hourInput || !minuteInput || 
          !decreaseHourBtn || !increaseHourBtn || !decreaseMinuteBtn || !increaseMinuteBtn || 
          !cancelBtn || !applyBtn || !dateTimeInput) {
        console.error("Required calendar elements are missing");
        return;
      }
      
      // Initialize variables
      let currentDate = new Date();
      let selectedDate = new Date();
      let selectedHour = 12;
      let selectedMinute = 0;
      
      // Initialize calendar
      function initializeCalendar() {
        // Clear existing days
        const existingDays = calendar.querySelectorAll(".day");
        existingDays.forEach(day => day.remove());
        
        // Set current month display
        const monthNames = ["January", "February", "March", "April", "May", "June", 
                           "July", "August", "September", "October", "November", "December"];
        currentMonth.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
        
        // Get first day of the month
        const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        const startingDay = firstDay.getDay();
        
        // Get number of days in the month
        const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
        
        // Add empty cells for days before the first day of the month
        for (let i = 0; i < startingDay; i++) {
          const emptyDay = document.createElement("div");
          emptyDay.className = "day empty";
          calendar.appendChild(emptyDay);
        }
        
        // Add days of the month
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        for (let i = 1; i <= daysInMonth; i++) {
          const dayElement = document.createElement("div");
          dayElement.className = "day";
          dayElement.textContent = i;
          
          // Check if this day is today
          const currentDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
          if (currentDay.getTime() === today.getTime()) {
            dayElement.classList.add("today");
          }
          
          // Check if this day is in the past
          if (currentDay < today) {
            dayElement.classList.add("disabled");
          }
          
          // Check if this day is selected
          if (selectedDate.getDate() === i && 
              selectedDate.getMonth() === currentDate.getMonth() && 
              selectedDate.getFullYear() === currentDate.getFullYear()) {
            dayElement.classList.add("selected");
          }
          
          // Add click event to select the day
          dayElement.addEventListener("click", function() {
            if (!this.classList.contains("disabled") && !this.classList.contains("empty")) {
              // Remove selected class from all days
              const selectedDays = calendar.querySelectorAll(".day.selected");
              selectedDays.forEach(day => day.classList.remove("selected"));
              
              // Add selected class to clicked day
              this.classList.add("selected");
              
              // Update selected date
              selectedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), parseInt(this.textContent));
            }
          });
          
          calendar.appendChild(dayElement);
        }
      }
      
      // Initialize the calendar on page load
      initializeCalendar();
      
      // Toggle dropdown
      datetimeTrigger.addEventListener("click", function(e) {
        e.stopPropagation();
        datetimeDropdown.classList.toggle("active");
      });
      
      // Close dropdown when clicking outside
      document.addEventListener("click", function(event) {
        if (!datetimeTrigger.contains(event.target) && !datetimeDropdown.contains(event.target)) {
          datetimeDropdown.classList.remove("active");
        }
      });
      
      // Previous month button
      prevMonthBtn.addEventListener("click", function(e) {
        e.stopPropagation();
        currentDate.setMonth(currentDate.getMonth() - 1);
        initializeCalendar();
      });
      
      // Next month button
      nextMonthBtn.addEventListener("click", function(e) {
        e.stopPropagation();
        currentDate.setMonth(currentDate.getMonth() + 1);
        initializeCalendar();
      });
      
      // Hour and minute controls
      decreaseHourBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        let hour = parseInt(hourInput.value);
        hour = (hour - 1 + 24) % 24;
        hourInput.value = hour.toString().padStart(2, "0");
        selectedHour = hour;
      });
      
      increaseHourBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        let hour = parseInt(hourInput.value);
        hour = (hour + 1) % 24;
        hourInput.value = hour.toString().padStart(2, "0");
        selectedHour = hour;
      });
      
      decreaseMinuteBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        let minute = parseInt(minuteInput.value);
        minute = (minute - 5 + 60) % 60;
        minuteInput.value = minute.toString().padStart(2, "0");
        selectedMinute = minute;
      });
      
      increaseMinuteBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        let minute = parseInt(minuteInput.value);
        minute = (minute + 5) % 60;
        minuteInput.value = minute.toString().padStart(2, "0");
        selectedMinute = minute;
      });
      
      // Quick date options
      quickDateOptions.forEach(option => {
        option.addEventListener("click", function(e) {
          e.stopPropagation();
          const days = parseInt(this.getAttribute("data-days"));
          const date = new Date();
          date.setDate(date.getDate() + days);
          date.setHours(0, 0, 0, 0);
          
          // Update current date and selected date
          currentDate = new Date(date);
          selectedDate = new Date(date);
          
          // Update calendar
          initializeCalendar();
          
          // Remove selected class from all quick date options
          quickDateOptions.forEach(opt => opt.classList.remove("selected"));
          
          // Add selected class to clicked option
          this.classList.add("selected");
        });
      });
      
      // Cancel button
      cancelBtn.addEventListener("click", function(e) {
        e.stopPropagation();
        datetimeDropdown.classList.remove("active");
      });
      
      // Apply button
      applyBtn.addEventListener("click", function(e) {
        e.stopPropagation();
        // Format the selected date and time
        const monthNames = ["January", "February", "March", "April", "May", "June", 
                           "July", "August", "September", "October", "November", "December"];
        const day = selectedDate.getDate();
        const month = monthNames[selectedDate.getMonth()];
        const year = selectedDate.getFullYear();
        
        // Update the hidden input with ISO format
        const isoDate = new Date(selectedDate);
        isoDate.setHours(selectedHour, selectedMinute, 0, 0);
        dateTimeInput.value = isoDate.toISOString().slice(0, 16);
        
        // Update the display
        const formattedTime = `${selectedHour.toString().padStart(2, "0")}:${selectedMinute.toString().padStart(2, "0")}`;
        selectedDatetime.textContent = `${month} ${day}, ${year} at ${formattedTime}`;
        
        // Close the dropdown
        datetimeDropdown.classList.remove("active");
      });

      // Configure SweetAlert2 Toast
      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer);
          toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
    });
    
    // Handle meeting form submission
    document.getElementById("meetingForm")?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const topic = document.getElementById("topic").value;
      const dateTime = document.getElementById("dateTime").value;
        
        if (!dateTime) {
          Toast.fire({
            icon: 'error',
            title: 'Please select a date and time for the meeting'
          });
          return;
        }
      
      try {
        const response = await fetch("/teams/create-meeting", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ topic, dateTime })
        });
        const data = await response.json();
        if (data.success) {
          const joinLink = document.getElementById("joinLink");
          joinLink.href = data.meetingLink;
          document.getElementById("meetingLinkContainer").style.display = "block";
          document.getElementById("copyButton").onclick = function() {
            navigator.clipboard.writeText(data.meetingLink)
                .then(() => {
                  Toast.fire({
                    icon: 'success',
                    title: 'Meeting link copied to clipboard!'
                  });
                })
                .catch(() => {
                  Toast.fire({
                    icon: 'error',
                    title: 'Failed to copy link. Please try manually.'
                  });
                });
            };
            
            // Add email button functionality
            document.getElementById("emailButton").onclick = function() {
              document.getElementById("templateModal").style.display = "block";
          };
        } else {
            Toast.fire({
              icon: 'error',
              title: 'Error creating meeting'
            });
          }
        } catch (err) {
          console.error("Error:", err);
          Toast.fire({
            icon: 'error',
            title: 'Error creating meeting'
          });
        }
      });

      // Email Modal Functionality
      const templateModal = document.getElementById("templateModal");
      const emailModal = document.getElementById("emailModal");
      const emailButton = document.getElementById("emailButton");
      const closeButtons = document.querySelectorAll(".close");
      const emailForm = document.getElementById("emailForm");
      const templateOptions = document.querySelectorAll(".template-option");

      // Show template selection modal when clicking email button
      emailButton.onclick = function() {
        templateModal.style.display = "block";
      };

      // Handle template selection
      templateOptions.forEach(option => {
        option.querySelector(".select-template").onclick = function() {
          const template = option.getAttribute("data-template");
          document.getElementById("selectedTemplate").value = template;
          templateModal.style.display = "none";
          emailModal.style.display = "block";
        };
      });

      // Close modals when clicking close buttons
      closeButtons.forEach(button => {
        button.onclick = function() {
          templateModal.style.display = "none";
          emailModal.style.display = "none";
        };
      });

      // Close modals when clicking outside
      window.onclick = function(event) {
        if (event.target == templateModal) {
          templateModal.style.display = "none";
        }
        if (event.target == emailModal) {
          emailModal.style.display = "none";
        }
      };

      // Handle email form submission
      emailForm.onsubmit = async function(e) {
        e.preventDefault();
        
        const recipientEmail = document.getElementById("recipientEmail").value;
        const recipientName = document.getElementById("recipientName").value;
        const template = document.getElementById("selectedTemplate").value;
        const meetingLink = document.getElementById("joinLink").href;
        const topic = document.getElementById("topic").value;
        const dateTime = document.getElementById("dateTime").value;
        
        const meetingDate = new Date(dateTime).toLocaleDateString();
        const meetingTime = new Date(dateTime).toLocaleTimeString();

        try {
          console.log('Sending email request...');
          const response = await fetch("/teams/send-email", {
            method: "POST",
            headers: { 
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify({
              recipientEmail,
              recipientName,
              meetingTopic: topic,
              meetingDate,
              meetingTime,
              meetingLink,
              language: template
            })
          });

          console.log('Response status:', response.status);
          const responseText = await response.text();
          console.log('Raw response:', responseText);

          let data;
          try {
            data = JSON.parse(responseText);
          } catch (parseError) {
            console.error('Failed to parse response as JSON:', parseError);
            throw new Error('Server returned invalid JSON response');
          }

          if (data.success) {
            Toast.fire({
              icon: 'success',
              title: 'Email sent successfully!'
            });
            emailModal.style.display = "none";
            emailForm.reset();
          } else {
            Toast.fire({
              icon: 'error',
              title: `Error sending email: ${data.error || 'Unknown error'}`
            });
          }
        } catch (err) {
          console.error("Error:", err);
          Toast.fire({
            icon: 'error',
            title: 'Error sending email: ' + (err.message || 'Unknown error')
          });
        }
      };
    });
  </script>

  <style>
    /* Template Modal Styles */
    .template-modal {
      max-width: 800px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
      padding: 20px;
    }

    .template-options-container {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin-top: 20px;
    }

    .template-option {
      flex: 1;
      background: #f9f9f9;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      transition: transform 0.2s, box-shadow 0.2s;
      border: 1px solid #ddd;
    }

    .template-option:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .template-option h3 {
      color: #253847;
      margin-bottom: 10px;
    }

    .template-option p {
      color: #666;
      margin-bottom: 20px;
    }

    .template-option .select-template {
      background-color: #253847;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .template-option .select-template:hover {
      background-color: #1a2a35;
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      overflow: auto;
    }

    .modal-content {
      background-color: #fff;
      margin: 5% auto;
      border-radius: 8px;
      position: relative;
    }

    .close {
      position: absolute;
      right: 20px;
      top: 10px;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      color: #666;
    }

    .close:hover {
      color: #000;
    }

    @media (max-width: 768px) {
      .template-options-container {
        flex-direction: column;
      }
      
      .template-modal {
        width: 95%;
        margin: 10% auto;
      }
    }
  </style>
</body>
</html>

